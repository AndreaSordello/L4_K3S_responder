---
apiVersion: v1
kind: Pod
metadata:
  name: nat-forwarder
spec:
  serviceAccountName: default   # must have RBAC to get nodes
  nodeName: poli-worker-00
  hostNetwork: true
  hostPID: true
  containers:
  - name: iptables-redirector
    image: ubuntu:22.04
    imagePullPolicy: IfNotPresent
    securityContext:
      privileged: true
    env:
    - name: NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    command:
    - sh
    - -c
    - |
      echo "Installing dependencies..."
      apt-get update && apt-get install -y iptables curl ca-certificates

      echo "Downloading kubectl..."
      curl -LO https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl
      chmod +x kubectl
      mv kubectl /usr/local/bin/kubectl

      NODE_NAME=$(cat /etc/hostname)  # or use downward API env

      echo "Waiting for Pod A IP (app=l4-responder)..."

      while true; do
        POD_A_IP=$(kubectl get pods -l app=l4-responder -o jsonpath='{.items[0].status.podIP}' 2>/dev/null)
        if [ -n "$POD_A_IP" ]; then
          echo "Found Pod A IP: $POD_A_IP"
          break
        fi
        echo "Pod A IP not found, retrying in 2s..."
        sleep 2
      done

      echo "Setting iptables to redirect TCP ports 40000-41000 to $POD_A_IP:10000"

      iptables -t nat -A PREROUTING -p tcp --dport 40000:41000 -j DNAT --to-destination $POD_A_IP:10000
      iptables -t nat -A POSTROUTING -j MASQUERADE
      echo "Done"
      tail -f /dev/null
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name: pod-reader
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: nat-forwarder-pod-reader-binding
  namespace: default
subjects:
- kind: ServiceAccount
  name: default
  namespace: default
roleRef:
  kind: Role
  name: pod-reader
  apiGroup: rbac.authorization.k8s.io
